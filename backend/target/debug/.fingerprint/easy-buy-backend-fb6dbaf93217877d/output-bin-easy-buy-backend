{"$message_type":"diagnostic","message":"cannot find function `create_product` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src/api/products.rs","byte_start":980,"byte_end":1532,"line_start":45,"line_end":60,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub async fn get_product(","highlight_start":1,"highlight_end":26},{"text":"    State(pool): State<PgPool>,","highlight_start":1,"highlight_end":32},{"text":"    Path(id): Path<Uuid>,","highlight_start":1,"highlight_end":26},{"text":") -> Result<Json<Product>, (StatusCode, String)> {","highlight_start":1,"highlight_end":51},{"text":"    let product = sqlx::query_as::<_, Product>(\"SELECT * FROM products WHERE id = $1\")","highlight_start":1,"highlight_end":87},{"text":"        .bind(id)","highlight_start":1,"highlight_end":18},{"text":"        .fetch_optional(&pool)","highlight_start":1,"highlight_end":31},{"text":"        .await","highlight_start":1,"highlight_end":15},{"text":"        .map_err(|e| {","highlight_start":1,"highlight_end":23},{"text":"            eprintln!(\"❌ Database error: {:?}\", e);","highlight_start":1,"highlight_end":52},{"text":"            (StatusCode::INTERNAL_SERVER_ERROR, \"Database error\".to_string())","highlight_start":1,"highlight_end":78},{"text":"        })?","highlight_start":1,"highlight_end":12},{"text":"        .ok_or((StatusCode::NOT_FOUND, \"Product not found\".to_string()))?;","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    Ok(Json(product))","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"similarly named function `get_product` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/api/products.rs","byte_start":644,"byte_end":658,"line_start":35,"line_end":35,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"    match create_product(&pool, payload).await {","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a function with a similar name exists","code":null,"level":"help","spans":[{"file_name":"src/api/products.rs","byte_start":644,"byte_end":658,"line_start":35,"line_end":35,"column_start":11,"column_end":25,"is_primary":true,"text":[{"text":"    match create_product(&pool, payload).await {","highlight_start":11,"highlight_end":25}],"label":null,"suggested_replacement":"get_product","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"consider importing this function","code":null,"level":"help","spans":[{"file_name":"src/api/products.rs","byte_start":8,"byte_end":8,"line_start":9,"line_end":9,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use axum::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::services::product::create_product;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function `create_product` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/products.rs:35:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    match create_product(&pool, payload).await {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn get_product(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    State(pool): State<PgPool>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Path(id): Path<Uuid>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m) -> Result<Json<Product>, (StatusCode, String)> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(Json(product))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msimilarly named function `get_product` defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: a function with a similar name exists\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    match \u001b[0m\u001b[0m\u001b[38;5;10mget_product\u001b[0m\u001b[0m(&pool, payload).await {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use crate::services::product::create_product;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `post`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":106,"byte_end":110,"line_start":3,"line_end":3,"column_start":20,"column_end":24,"is_primary":true,"text":[{"text":"    routing::{get, post},","highlight_start":20,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":104,"byte_end":110,"line_start":3,"line_end":3,"column_start":18,"column_end":24,"is_primary":true,"text":[{"text":"    routing::{get, post},","highlight_start":18,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/main.rs","byte_start":100,"byte_end":101,"line_start":3,"line_end":3,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"    routing::{get, post},","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/main.rs","byte_start":110,"byte_end":111,"line_start":3,"line_end":3,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"    routing::{get, post},","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `post`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:3:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    routing::{get, post},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `crate::models::user::Claims`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/api/user.rs","byte_start":68,"byte_end":95,"line_start":3,"line_end":3,"column_start":5,"column_end":32,"is_primary":true,"text":[{"text":"use crate::models::user::Claims;","highlight_start":5,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/api/user.rs","byte_start":64,"byte_end":97,"line_start":3,"line_end":4,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::models::user::Claims;","highlight_start":1,"highlight_end":33},{"text":"use axum::extract::State;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::models::user::Claims`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/user.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::models::user::Claims;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `FromRow`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/api/products.rs","byte_start":120,"byte_end":127,"line_start":15,"line_end":15,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"use sqlx::{FromRow, PgPool};","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/api/products.rs","byte_start":120,"byte_end":129,"line_start":15,"line_end":15,"column_start":12,"column_end":21,"is_primary":true,"text":[{"text":"use sqlx::{FromRow, PgPool};","highlight_start":12,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/api/products.rs","byte_start":119,"byte_end":120,"line_start":15,"line_end":15,"column_start":11,"column_end":12,"is_primary":true,"text":[{"text":"use sqlx::{FromRow, PgPool};","highlight_start":11,"highlight_end":12}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/api/products.rs","byte_start":135,"byte_end":136,"line_start":15,"line_end":15,"column_start":27,"column_end":28,"is_primary":true,"text":[{"text":"use sqlx::{FromRow, PgPool};","highlight_start":27,"highlight_end":28}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `FromRow`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/products.rs:15:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse sqlx::{FromRow, PgPool};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `response::IntoResponse`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/middleware/auth.rs","byte_start":106,"byte_end":128,"line_start":5,"line_end":5,"column_start":5,"column_end":27,"is_primary":true,"text":[{"text":"    response::IntoResponse,","highlight_start":5,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/middleware/auth.rs","byte_start":100,"byte_end":128,"line_start":4,"line_end":5,"column_start":39,"column_end":27,"is_primary":true,"text":[{"text":"    http::{request::Parts, StatusCode},","highlight_start":39,"highlight_end":40},{"text":"    response::IntoResponse,","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `response::IntoResponse`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/middleware/auth.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    response::IntoResponse,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `pool`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/api/user.rs","byte_start":506,"byte_end":510,"line_start":18,"line_end":18,"column_start":11,"column_end":15,"is_primary":true,"text":[{"text":"    State(pool): State<PgPool>,","highlight_start":11,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/api/user.rs","byte_start":506,"byte_end":510,"line_start":18,"line_end":18,"column_start":11,"column_end":15,"is_primary":true,"text":[{"text":"    State(pool): State<PgPool>,","highlight_start":11,"highlight_end":15}],"label":null,"suggested_replacement":"_pool","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `pool`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/api/user.rs:18:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    State(pool): State<PgPool>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_pool`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `NaiveDateTime: Encode<'_, Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/maxwell/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-0.7.4/src/macros/mod.rs","byte_start":28742,"byte_end":28852,"line_start":634,"line_end":634,"column_start":9,"column_end":119,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*], checked = false)","highlight_start":9,"highlight_end":119}],"label":"the trait `Encode<'_, Postgres>` is not implemented for `NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/maxwell/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-0.7.4/src/macros/mod.rs","byte_start":28742,"byte_end":28852,"line_start":634,"line_end":634,"column_start":9,"column_end":119,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*], checked = false)","highlight_start":9,"highlight_end":119}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/services/product.rs","byte_start":304,"byte_end":793,"line_start":10,"line_end":24,"column_start":15,"column_end":6,"is_primary":false,"text":[{"text":"    let rec = sqlx::query_as_unchecked!(","highlight_start":15,"highlight_end":41},{"text":"        Product,","highlight_start":1,"highlight_end":17},{"text":"        r#\"","highlight_start":1,"highlight_end":12},{"text":"        INSERT INTO products (id, name, description, price, stock_quantity, created_at, updated_at)","highlight_start":1,"highlight_end":100},{"text":"        VALUES ($1, $2, $3, $4, $5, $6, $7)","highlight_start":1,"highlight_end":44},{"text":"        RETURNING id, name, description, price, stock_quantity, created_at, updated_at","highlight_start":1,"highlight_end":87},{"text":"        \"#,","highlight_start":1,"highlight_end":12},{"text":"        Uuid::new_v4(),","highlight_start":1,"highlight_end":24},{"text":"        new_product.name,","highlight_start":1,"highlight_end":26},{"text":"        new_product.description,","highlight_start":1,"highlight_end":33},{"text":"        new_product.price,","highlight_start":1,"highlight_end":27},{"text":"        new_product.stock_quantity,","highlight_start":1,"highlight_end":36},{"text":"        created_at,","highlight_start":1,"highlight_end":20},{"text":"        updated_at","highlight_start":1,"highlight_end":19},{"text":"    )","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query_as_unchecked!","def_site_span":{"file_name":"/home/maxwell/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-0.7.4/src/macros/mod.rs","byte_start":28492,"byte_end":28523,"line_start":628,"line_end":628,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"macro_rules! query_as_unchecked (","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/home/maxwell/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-macros-0.7.4/src/lib.rs","byte_start":89,"byte_end":143,"line_start":8,"line_end":8,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  `&'a str` implements `Encode<'a, sqlx::Any>`\n  `&'q [u8]` implements `Encode<'q, sqlx::Any>`\n  `&T` implements `Encode<'q, DB>`\n  `&[T]` implements `Encode<'q, Postgres>`\n  `&[u8]` implements `Encode<'_, Postgres>`\n  `&str` implements `Encode<'_, Postgres>`\n  `Box<[u8]>` implements `Encode<'_, Postgres>`\n  `Box<str>` implements `Encode<'_, Postgres>`\nand 35 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: Encode<'_, Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/services/product.rs:10:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let rec = sqlx::query_as_unchecked!(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m _______________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Product,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        r#\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        INSERT INTO products (id, name, description, price, stock_quantity, created_at, updated_at)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        updated_at\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    )\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, Postgres>` is not implemented for `NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             `&'a str` implements `Encode<'a, sqlx::Any>`\u001b[0m\n\u001b[0m             `&'q [u8]` implements `Encode<'q, sqlx::Any>`\u001b[0m\n\u001b[0m             `&T` implements `Encode<'q, DB>`\u001b[0m\n\u001b[0m             `&[T]` implements `Encode<'q, Postgres>`\u001b[0m\n\u001b[0m             `&[u8]` implements `Encode<'_, Postgres>`\u001b[0m\n\u001b[0m             `&str` implements `Encode<'_, Postgres>`\u001b[0m\n\u001b[0m             `Box<[u8]>` implements `Encode<'_, Postgres>`\u001b[0m\n\u001b[0m             `Box<str>` implements `Encode<'_, Postgres>`\u001b[0m\n\u001b[0m           and 35 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` which comes from the expansion of the macro `sqlx::query_as_unchecked` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `NaiveDateTime: Type<Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/maxwell/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-0.7.4/src/macros/mod.rs","byte_start":28742,"byte_end":28852,"line_start":634,"line_end":634,"column_start":9,"column_end":119,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*], checked = false)","highlight_start":9,"highlight_end":119}],"label":"the trait `Type<Postgres>` is not implemented for `NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/maxwell/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-0.7.4/src/macros/mod.rs","byte_start":28742,"byte_end":28852,"line_start":634,"line_end":634,"column_start":9,"column_end":119,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*], checked = false)","highlight_start":9,"highlight_end":119}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/services/product.rs","byte_start":304,"byte_end":793,"line_start":10,"line_end":24,"column_start":15,"column_end":6,"is_primary":false,"text":[{"text":"    let rec = sqlx::query_as_unchecked!(","highlight_start":15,"highlight_end":41},{"text":"        Product,","highlight_start":1,"highlight_end":17},{"text":"        r#\"","highlight_start":1,"highlight_end":12},{"text":"        INSERT INTO products (id, name, description, price, stock_quantity, created_at, updated_at)","highlight_start":1,"highlight_end":100},{"text":"        VALUES ($1, $2, $3, $4, $5, $6, $7)","highlight_start":1,"highlight_end":44},{"text":"        RETURNING id, name, description, price, stock_quantity, created_at, updated_at","highlight_start":1,"highlight_end":87},{"text":"        \"#,","highlight_start":1,"highlight_end":12},{"text":"        Uuid::new_v4(),","highlight_start":1,"highlight_end":24},{"text":"        new_product.name,","highlight_start":1,"highlight_end":26},{"text":"        new_product.description,","highlight_start":1,"highlight_end":33},{"text":"        new_product.price,","highlight_start":1,"highlight_end":27},{"text":"        new_product.stock_quantity,","highlight_start":1,"highlight_end":36},{"text":"        created_at,","highlight_start":1,"highlight_end":20},{"text":"        updated_at","highlight_start":1,"highlight_end":19},{"text":"    )","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query_as_unchecked!","def_site_span":{"file_name":"/home/maxwell/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-0.7.4/src/macros/mod.rs","byte_start":28492,"byte_end":28523,"line_start":628,"line_end":628,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"macro_rules! query_as_unchecked (","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/home/maxwell/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-macros-0.7.4/src/lib.rs","byte_start":89,"byte_end":143,"line_start":8,"line_end":8,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Type<DB>`:\n  `&T` implements `Type<DB>`\n  `()` implements `Type<Postgres>`\n  `(T1, T2)` implements `Type<Postgres>`\n  `(T1, T2, T3)` implements `Type<Postgres>`\n  `(T1, T2, T3, T4)` implements `Type<Postgres>`\n  `(T1, T2, T3, T4, T5)` implements `Type<Postgres>`\n  `(T1, T2, T3, T4, T5, T6)` implements `Type<Postgres>`\n  `(T1, T2, T3, T4, T5, T6, T7)` implements `Type<Postgres>`\nand 42 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&NaiveDateTime` to implement `Type<Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::Arguments::add`","code":null,"level":"note","spans":[{"file_name":"/home/maxwell/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.7.4/src/arguments.rs","byte_start":592,"byte_end":595,"line_start":17,"line_end":17,"column_start":8,"column_end":11,"is_primary":false,"text":[{"text":"    fn add<T>(&mut self, value: T)","highlight_start":8,"highlight_end":11}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/maxwell/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.7.4/src/arguments.rs","byte_start":682,"byte_end":702,"line_start":19,"line_end":19,"column_start":53,"column_end":73,"is_primary":true,"text":[{"text":"        T: 'q + Send + Encode<'q, Self::Database> + Type<Self::Database>;","highlight_start":53,"highlight_end":73}],"label":"required by this bound in `Arguments::add`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"use a unary tuple instead","code":null,"level":"help","spans":[{"file_name":"/home/maxwell/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-0.7.4/src/macros/mod.rs","byte_start":28742,"byte_end":28742,"line_start":634,"line_end":634,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*], checked = false)","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"(","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/home/maxwell/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-0.7.4/src/macros/mod.rs","byte_start":28742,"byte_end":28852,"line_start":634,"line_end":634,"column_start":9,"column_end":119,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*], checked = false)","highlight_start":9,"highlight_end":119}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/services/product.rs","byte_start":304,"byte_end":793,"line_start":10,"line_end":24,"column_start":15,"column_end":6,"is_primary":false,"text":[{"text":"    let rec = sqlx::query_as_unchecked!(","highlight_start":15,"highlight_end":41},{"text":"        Product,","highlight_start":1,"highlight_end":17},{"text":"        r#\"","highlight_start":1,"highlight_end":12},{"text":"        INSERT INTO products (id, name, description, price, stock_quantity, created_at, updated_at)","highlight_start":1,"highlight_end":100},{"text":"        VALUES ($1, $2, $3, $4, $5, $6, $7)","highlight_start":1,"highlight_end":44},{"text":"        RETURNING id, name, description, price, stock_quantity, created_at, updated_at","highlight_start":1,"highlight_end":87},{"text":"        \"#,","highlight_start":1,"highlight_end":12},{"text":"        Uuid::new_v4(),","highlight_start":1,"highlight_end":24},{"text":"        new_product.name,","highlight_start":1,"highlight_end":26},{"text":"        new_product.description,","highlight_start":1,"highlight_end":33},{"text":"        new_product.price,","highlight_start":1,"highlight_end":27},{"text":"        new_product.stock_quantity,","highlight_start":1,"highlight_end":36},{"text":"        created_at,","highlight_start":1,"highlight_end":20},{"text":"        updated_at","highlight_start":1,"highlight_end":19},{"text":"    )","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query_as_unchecked!","def_site_span":{"file_name":"/home/maxwell/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-0.7.4/src/macros/mod.rs","byte_start":28492,"byte_end":28523,"line_start":628,"line_end":628,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"macro_rules! query_as_unchecked (","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/home/maxwell/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-macros-0.7.4/src/lib.rs","byte_start":89,"byte_end":143,"line_start":8,"line_end":8,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/maxwell/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-0.7.4/src/macros/mod.rs","byte_start":28852,"byte_end":28852,"line_start":634,"line_end":634,"column_start":119,"column_end":119,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*], checked = false)","highlight_start":119,"highlight_end":119}],"label":null,"suggested_replacement":",)","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"/home/maxwell/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-0.7.4/src/macros/mod.rs","byte_start":28742,"byte_end":28852,"line_start":634,"line_end":634,"column_start":9,"column_end":119,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*], checked = false)","highlight_start":9,"highlight_end":119}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/services/product.rs","byte_start":304,"byte_end":793,"line_start":10,"line_end":24,"column_start":15,"column_end":6,"is_primary":false,"text":[{"text":"    let rec = sqlx::query_as_unchecked!(","highlight_start":15,"highlight_end":41},{"text":"        Product,","highlight_start":1,"highlight_end":17},{"text":"        r#\"","highlight_start":1,"highlight_end":12},{"text":"        INSERT INTO products (id, name, description, price, stock_quantity, created_at, updated_at)","highlight_start":1,"highlight_end":100},{"text":"        VALUES ($1, $2, $3, $4, $5, $6, $7)","highlight_start":1,"highlight_end":44},{"text":"        RETURNING id, name, description, price, stock_quantity, created_at, updated_at","highlight_start":1,"highlight_end":87},{"text":"        \"#,","highlight_start":1,"highlight_end":12},{"text":"        Uuid::new_v4(),","highlight_start":1,"highlight_end":24},{"text":"        new_product.name,","highlight_start":1,"highlight_end":26},{"text":"        new_product.description,","highlight_start":1,"highlight_end":33},{"text":"        new_product.price,","highlight_start":1,"highlight_end":27},{"text":"        new_product.stock_quantity,","highlight_start":1,"highlight_end":36},{"text":"        created_at,","highlight_start":1,"highlight_end":20},{"text":"        updated_at","highlight_start":1,"highlight_end":19},{"text":"    )","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query_as_unchecked!","def_site_span":{"file_name":"/home/maxwell/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-0.7.4/src/macros/mod.rs","byte_start":28492,"byte_end":28523,"line_start":628,"line_end":628,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"macro_rules! query_as_unchecked (","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/home/maxwell/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-macros-0.7.4/src/lib.rs","byte_start":89,"byte_end":143,"line_start":8,"line_end":8,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: Type<Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/services/product.rs:10:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let rec = sqlx::query_as_unchecked!(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m _______________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Product,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        r#\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        INSERT INTO products (id, name, description, price, stock_quantity, created_at, updated_at)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        updated_at\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    )\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Type<Postgres>` is not implemented for `NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Type<DB>`:\u001b[0m\n\u001b[0m             `&T` implements `Type<DB>`\u001b[0m\n\u001b[0m             `()` implements `Type<Postgres>`\u001b[0m\n\u001b[0m             `(T1, T2)` implements `Type<Postgres>`\u001b[0m\n\u001b[0m             `(T1, T2, T3)` implements `Type<Postgres>`\u001b[0m\n\u001b[0m             `(T1, T2, T3, T4)` implements `Type<Postgres>`\u001b[0m\n\u001b[0m             `(T1, T2, T3, T4, T5)` implements `Type<Postgres>`\u001b[0m\n\u001b[0m             `(T1, T2, T3, T4, T5, T6)` implements `Type<Postgres>`\u001b[0m\n\u001b[0m             `(T1, T2, T3, T4, T5, T6, T7)` implements `Type<Postgres>`\u001b[0m\n\u001b[0m           and 42 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&NaiveDateTime` to implement `Type<Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::Arguments::add`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/maxwell/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.7.4/src/arguments.rs:19:53\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn add<T>(&mut self, value: T)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        T: 'q + Send + Encode<'q, Self::Database> + Type<Self::Database>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Arguments::add`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` which comes from the expansion of the macro `sqlx::query_as_unchecked` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use a unary tuple instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/maxwell/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-0.7.4/src/macros/mod.rs:634:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m634| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10m(\u001b[0m\u001b[0m$crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*], checked = false)\u001b[0m\u001b[0m\u001b[38;5;10m,)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\u001b[0m                                                                                                              \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 3 previous errors; 5 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors; 5 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0277, E0425.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0425.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
